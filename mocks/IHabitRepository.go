// Code generated by mockery v2.19.0. DO NOT EDIT.

package mocks

import (
	models "github.com/FR0ST1N/MyDailies/api/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IHabitRepository is an autogenerated mock type for the IHabitRepository type
type IHabitRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: u
func (_m *IHabitRepository) Create(u *models.Habit) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Habit) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: u
func (_m *IHabitRepository) Delete(u *models.Habit) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Habit) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntriesCount provides a mock function with given fields: habitId
func (_m *IHabitRepository) EntriesCount(habitId uint) (int64, error) {
	ret := _m.Called(habitId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uint) int64); ok {
		r0 = rf(habitId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(habitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHabits provides a mock function with given fields: u
func (_m *IHabitRepository) GetHabits(u *models.User) (*[]models.Habit, error) {
	ret := _m.Called(u)

	var r0 *[]models.Habit
	if rf, ok := ret.Get(0).(func(*models.User) *[]models.Habit); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Habit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUser provides a mock function with given fields: userId, habitId
func (_m *IHabitRepository) IsUser(userId uint, habitId uint) (bool, error) {
	ret := _m.Called(userId, habitId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(userId, habitId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userId, habitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LongestStreak provides a mock function with given fields: habitId
func (_m *IHabitRepository) LongestStreak(habitId uint) (uint, error) {
	ret := _m.Called(habitId)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(habitId)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(habitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: u
func (_m *IHabitRepository) Read(u *models.HabitResponse) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.HabitResponse) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Streak provides a mock function with given fields: habitId, loc
func (_m *IHabitRepository) Streak(habitId uint, loc *time.Location) (uint, error) {
	ret := _m.Called(habitId, loc)

	var r0 uint
	if rf, ok := ret.Get(0).(func(uint, *time.Location) uint); ok {
		r0 = rf(habitId, loc)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *time.Location) error); ok {
		r1 = rf(habitId, loc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIHabitRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIHabitRepository creates a new instance of IHabitRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIHabitRepository(t mockConstructorTestingTNewIHabitRepository) *IHabitRepository {
	mock := &IHabitRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
